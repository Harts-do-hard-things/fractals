Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> calc
Rule 1     calc -> obj_list
Rule 2     calc -> expression
Rule 3     calc -> none
Rule 4     obj_list -> object
Rule 5     obj_list -> obj_list object
Rule 6     object -> ID 2D_ARRAY
Rule 7     2D_ARRAY -> ARRAY
Rule 8     2D_ARRAY -> 2D_ARRAY ARRAY
Rule 9     expression -> ID
Rule 10    expression -> ARRAY
Rule 11    none -> <empty>

Terminals, with rules where they appear

ARRAY                : 7 8 10
ID                   : 6 9
error                : 

Nonterminals, with rules where they appear

2D_ARRAY             : 6 8
calc                 : 0
expression           : 2
none                 : 3
obj_list             : 1 5
object               : 4 5

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . obj_list
    (2) calc -> . expression
    (3) calc -> . none
    (4) obj_list -> . object
    (5) obj_list -> . obj_list object
    (9) expression -> . ID
    (10) expression -> . ARRAY
    (11) none -> .
    (6) object -> . ID 2D_ARRAY

    ID              shift and go to state 6
    ARRAY           shift and go to state 7
    $end            reduce using rule 11 (none -> .)

    calc                           shift and go to state 1
    obj_list                       shift and go to state 2
    expression                     shift and go to state 3
    none                           shift and go to state 4
    object                         shift and go to state 5

state 1

    (0) S' -> calc .



state 2

    (1) calc -> obj_list .
    (5) obj_list -> obj_list . object
    (6) object -> . ID 2D_ARRAY

    $end            reduce using rule 1 (calc -> obj_list .)
    ID              shift and go to state 9

    object                         shift and go to state 8

state 3

    (2) calc -> expression .

    $end            reduce using rule 2 (calc -> expression .)


state 4

    (3) calc -> none .

    $end            reduce using rule 3 (calc -> none .)


state 5

    (4) obj_list -> object .

    ID              reduce using rule 4 (obj_list -> object .)
    $end            reduce using rule 4 (obj_list -> object .)


state 6

    (9) expression -> ID .
    (6) object -> ID . 2D_ARRAY
    (7) 2D_ARRAY -> . ARRAY
    (8) 2D_ARRAY -> . 2D_ARRAY ARRAY

    $end            reduce using rule 9 (expression -> ID .)
    ARRAY           shift and go to state 11

    2D_ARRAY                       shift and go to state 10

state 7

    (10) expression -> ARRAY .

    $end            reduce using rule 10 (expression -> ARRAY .)


state 8

    (5) obj_list -> obj_list object .

    ID              reduce using rule 5 (obj_list -> obj_list object .)
    $end            reduce using rule 5 (obj_list -> obj_list object .)


state 9

    (6) object -> ID . 2D_ARRAY
    (7) 2D_ARRAY -> . ARRAY
    (8) 2D_ARRAY -> . 2D_ARRAY ARRAY

    ARRAY           shift and go to state 11

    2D_ARRAY                       shift and go to state 10

state 10

    (6) object -> ID 2D_ARRAY .
    (8) 2D_ARRAY -> 2D_ARRAY . ARRAY

    ID              reduce using rule 6 (object -> ID 2D_ARRAY .)
    $end            reduce using rule 6 (object -> ID 2D_ARRAY .)
    ARRAY           shift and go to state 12


state 11

    (7) 2D_ARRAY -> ARRAY .

    ARRAY           reduce using rule 7 (2D_ARRAY -> ARRAY .)
    ID              reduce using rule 7 (2D_ARRAY -> ARRAY .)
    $end            reduce using rule 7 (2D_ARRAY -> ARRAY .)


state 12

    (8) 2D_ARRAY -> 2D_ARRAY ARRAY .

    ARRAY           reduce using rule 8 (2D_ARRAY -> 2D_ARRAY ARRAY .)
    ID              reduce using rule 8 (2D_ARRAY -> 2D_ARRAY ARRAY .)
    $end            reduce using rule 8 (2D_ARRAY -> 2D_ARRAY ARRAY .)

